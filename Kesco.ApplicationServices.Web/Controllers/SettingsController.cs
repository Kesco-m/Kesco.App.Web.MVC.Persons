using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Kesco.Web.Mvc;
using Kesco.Web.Mvc.UI.Grid;
using Kesco.ApplicationServices.Web.Models;
using Kesco.Lib.Log;

namespace Kesco.ApplicationServices.Web.Controllers
{
	[Authorize]
    public class SettingsController : ControllerEx
    {
        //
        // GET: /Settings/

		public class UserSettingModel
		{
			public int clid { get; set; }
			public string key { get; set; }
			public string value { get; set; }
		}

		public ActionResult Index()
		{
			var gridModel = new UserSettingsViewModel();
			SetUpItemTypesGrid(gridModel.Grid);
			return View(gridModel);
		}

		public ActionResult UserSettingsGrid_EditRows(UserSetting editedOrder)
		{
			// Get the grid and database (northwind) models
			var gridModel = new UserSettingsViewModel();

			// If we are in "Edit" mode
			if (gridModel.Grid.AjaxCallBackMode == AjaxCallBackMode.EditRow) {
			}
			if (gridModel.Grid.AjaxCallBackMode == AjaxCallBackMode.AddRow) {
			}
			if (gridModel.Grid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow) {
			}

			return RedirectToAction("Index");
		}

		// This method is called when the grid requests data
		public JsonResult UserSettingsGrid_DataRequested()
		{
			// Get both the grid Model and the data Model
			// The data model in our case is an autogenerated linq2sql database based on Northwind.
			var gridModel = new UserSettingsViewModel();

			SetUpItemTypesGrid(gridModel.Grid);

			// return the result of the DataBind method, passing the datasource as a parameter
			// jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
			return gridModel.Grid.DataBind(Kesco.ApplicationServices.Manager.SelectUserSettings().AsQueryable());
		}

		private void SetUpItemTypesGrid(JQGrid grid)
		{
			// Customize/change some of the default settings for this model
			// ID is a mandatory field. Must by unique if you have several grids on one page.
			grid.ID = "UserSettingsGrid";
			grid.DataUrl = Url.Action("UserSettingsGrid_DataRequested");
			grid.EditUrl = Url.Action("UserSettingsGrid_EditRows");
			grid.Columns.Insert(0, new JQGridColumn {
					EditActionIconsColumn = true,
					Fixed = true,
					Width = 50,
					Searchable = false
			});
			grid.PagerSettings.PageSize = 30;
			grid.ToolBarSettings.ShowSearchToolBar = true;
			grid.ToolBarSettings.ShowSearchButton = true;

		}


		public ActionResult Index2()
        {
			try {
				var model = Kesco.ApplicationServices.Manager.SelectUserSettings();
				return JsonModel(model, JsonRequestBehavior.AllowGet);
			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex);
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}

		//
		// GET: /Settings/SaveUserSettings/?clid=xx&key=key1&value=value1
		public ActionResult SaveUserSettings(UserSettingModel[] settings)
		{
			try {

				if (ModelState.IsValid) {
					settings.ToList().ForEach(setting => {
						Kesco.ApplicationServices.Manager.SaveUserSetting(setting.clid, setting.key, setting.value);
					});
					return JsonModel(settings, JsonRequestBehavior.AllowGet);
				} else {
					return JsonError("Неверные данные", new {
							Model = settings,
							error_details = GetModelErrors()
						},
						JsonRequestBehavior.AllowGet);
				}

			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex);
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}
		
		//
		// GET: /Settings/SaveUserSetting/?clid=xx&key=key1&value=value1
        public ActionResult SaveUserSetting(UserSettingModel setting)
        {
			try {
				if (ModelState.IsValid) {
					Kesco.ApplicationServices.Manager.SaveUserSetting(setting.clid, setting.key, setting.value);
					return JsonModel(setting, JsonRequestBehavior.AllowGet);
				} else {
					return JsonError("Неверные данные", new {
							Model = setting,
							error_details = GetModelErrors()
						},
						JsonRequestBehavior.AllowGet);
				}

			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex);
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}

		//
		// GET: /Settings/GetUserSetting/?clid=xx&key=key1
		public ActionResult GetUserSetting(UserSettingModel setting)
		{
			try {
				if (ModelState.IsValid) {
					setting.value = Kesco.ApplicationServices.Manager.GetUserSettingValue(setting.clid, setting.key);
					return JsonModel(setting, JsonRequestBehavior.AllowGet);
				} else {
					return JsonError("Неверные данные", new {
							Model = setting,
							error_details = GetModelErrors()
						},
						JsonRequestBehavior.AllowGet);
				}
			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex);
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}

		public ActionResult GetUserSettings(UserSettingModel[] settings)
		{
			try {
				if (ModelState.IsValid) {
					if (settings != null) {
						settings.ToList().ForEach(setting => {
							setting.value = Kesco.ApplicationServices.Manager.GetUserSettingValue(setting.clid, setting.key);
						});
					}
					return JsonModel(settings, JsonRequestBehavior.AllowGet);
				} else {
					return JsonError("Неверные данные", new {
							Model = settings,
							error_details = GetModelErrors()
						},
						JsonRequestBehavior.AllowGet);
				}
			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex);
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}

		//
		// GET: /Settings/GetClientApplicationUserSettings/?clid=xx
		public ActionResult GetClientApplicationUserSettings(int clid)
		{
			try {
				List<UserSetting> userSettings = Kesco.ApplicationServices.Manager.SelectClientApplicationUserSettings(clid);
				List<UserSettingModel> model = new List<UserSettingModel>();
				userSettings.ForEach(userSetting => {
					model.Add(new UserSettingModel {
						clid = userSetting.ClientApplicationID,
						key = userSetting.Parameter,
						value = userSetting.Value
					});
				});

				return JsonModel(model, JsonRequestBehavior.AllowGet);
			} catch (Exception ex) {
				Kesco.Logger.WriteEx(ex); 
				return JsonError(ex.Message, ex.ToString(), JsonRequestBehavior.AllowGet);
			}
		}

		//
        // GET: /Settings/Create

        public ActionResult Create()
        {
            return View();
        } 

        //
        // POST: /Settings/Create

        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            try
            {
                // TODO: Add insert logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
        
        //
        // GET: /Settings/Edit/5
 
        public ActionResult Edit(int id)
        {
            return View();
        }

        //
        // POST: /Settings/Edit/5

        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here
 
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        //
        // GET: /Settings/Delete/5
 
        public ActionResult Delete(int id)
        {
            return View();
        }

        //
        // POST: /Settings/Delete/5

        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here
 
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
    }
}
