//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kesco.EnterpriseLibrary.Logging.Extensions {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DesignResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesignResources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Kesco.EnterpriseLibrary.Logging.Extensions.Resources.DesignResources", typeof(DesignResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add Logging Settings.
        /// </summary>
        public static string AddLoggingSettings {
            get {
                return ResourceManager.GetString("AddLoggingSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A class that writes log messages to a custom logging target, and is added to the Logging Application Block..
        /// </summary>
        public static string BasicCustomTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Basic Custom Trace Listener.
        /// </summary>
        public static string BasicCustomTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string BasicCustomTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string BasicCustomTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string BasicCustomTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string BasicCustomTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Listener..
        /// </summary>
        public static string BasicCustomTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string BasicCustomTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string BasicCustomTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string BasicCustomTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Custom Trace Listener..
        /// </summary>
        public static string BasicCustomTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string BasicCustomTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("BasicCustomTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A Log Message Formatter that generates the output for a log message in a binary format suitable for use with listeners such as the Message Queuing (MSMQ) Trace Listener. .
        /// </summary>
        public static string BinaryLogFormatterDataDescription {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Binary Log Message Formatter.
        /// </summary>
        public static string BinaryLogFormatterDataDisplayName {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Binary Log Message Formatter..
        /// </summary>
        public static string BinaryLogFormatterDataNameDescription {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string BinaryLogFormatterDataNameDisplayName {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Binary Log Message Formatter..
        /// </summary>
        public static string BinaryLogFormatterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string BinaryLogFormatterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("BinaryLogFormatterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies if the filter will allow only messages that match one of the configured categories to pass to the logging target (DenyAllExceptAllowed), 
        ///or will allow all message except those that match one of the configured categories to pass to the logging target (AllowAllExceptDenied)..
        /// </summary>
        public static string CategoryFilterDataCategoryFilterModeDescription {
            get {
                return ResourceManager.GetString("CategoryFilterDataCategoryFilterModeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Filter Mode.
        /// </summary>
        public static string CategoryFilterDataCategoryFilterModeDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterDataCategoryFilterModeDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of all the Categories defined for this Category Filter..
        /// </summary>
        public static string CategoryFilterDataCategoryFiltersDescription {
            get {
                return ResourceManager.GetString("CategoryFilterDataCategoryFiltersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Categories.
        /// </summary>
        public static string CategoryFilterDataCategoryFiltersDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterDataCategoryFiltersDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A Logging Filter that blocks log messages or allows them to pass to the configured logging target listener(s) based on the categories assigned to the log message. Each Category Filter can be configured for one or more categories, and can be set to allow or block messages assigned to any of these categories..
        /// </summary>
        public static string CategoryFilterDataDescription {
            get {
                return ResourceManager.GetString("CategoryFilterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Category Filter.
        /// </summary>
        public static string CategoryFilterDataDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Category Filter..
        /// </summary>
        public static string CategoryFilterDataNameDescription {
            get {
                return ResourceManager.GetString("CategoryFilterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string CategoryFilterDataNameDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Category Filter..
        /// </summary>
        public static string CategoryFilterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("CategoryFilterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string CategoryFilterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A single category in the collection of filters for a Category Filter..
        /// </summary>
        public static string CategoryFilterEntryDescription {
            get {
                return ResourceManager.GetString("CategoryFilterEntryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Category.
        /// </summary>
        public static string CategoryFilterEntryDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterEntryDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Category Filter Entry..
        /// </summary>
        public static string CategoryFilterEntryNameDescription {
            get {
                return ResourceManager.GetString("CategoryFilterEntryNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string CategoryFilterEntryNameDisplayName {
            get {
                return ResourceManager.GetString("CategoryFilterEntryNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A class that implements custom formatting for log messages, and is added to the Logging Application Block..
        /// </summary>
        public static string CustomFormatterDataDescription {
            get {
                return ResourceManager.GetString("CustomFormatterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Custom Log Message Formatter.
        /// </summary>
        public static string CustomFormatterDataDisplayName {
            get {
                return ResourceManager.GetString("CustomFormatterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Custom Log Message Formatter..
        /// </summary>
        public static string CustomFormatterDataNameDescription {
            get {
                return ResourceManager.GetString("CustomFormatterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string CustomFormatterDataNameDisplayName {
            get {
                return ResourceManager.GetString("CustomFormatterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Custom Log Message Formatter..
        /// </summary>
        public static string CustomFormatterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("CustomFormatterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string CustomFormatterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("CustomFormatterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A class that implements custom filtering for log messages, and is added to the Logging Application Block..
        /// </summary>
        public static string CustomLogFilterDataDescription {
            get {
                return ResourceManager.GetString("CustomLogFilterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Custom Logging Filter.
        /// </summary>
        public static string CustomLogFilterDataDisplayName {
            get {
                return ResourceManager.GetString("CustomLogFilterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Custom Logging Filter..
        /// </summary>
        public static string CustomLogFilterDataNameDescription {
            get {
                return ResourceManager.GetString("CustomLogFilterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string CustomLogFilterDataNameDisplayName {
            get {
                return ResourceManager.GetString("CustomLogFilterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Custom Logging Filter..
        /// </summary>
        public static string CustomLogFilterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("CustomLogFilterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string CustomLogFilterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("CustomLogFilterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A class that writes log messages to a custom logging target, and is added to the Logging Application Block..
        /// </summary>
        public static string CustomTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Custom Trace Listener.
        /// </summary>
        public static string CustomTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string CustomTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string CustomTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter.
        /// </summary>
        public static string CustomTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter.
        /// </summary>
        public static string CustomTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string CustomTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string CustomTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Custom Trace Listener..
        /// </summary>
        public static string CustomTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string CustomTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. The default is None. 
        ///This property is optional..
        /// </summary>
        public static string CustomTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string CustomTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Custom Trace Listener..
        /// </summary>
        public static string CustomTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type Name.
        /// </summary>
        public static string CustomTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("CustomTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A value from the EmailAuthenticationMode enumeration that specifies how the listener will authenticate the user. 
        ///Valid values are None, WindowsCredentials, and UserNameAndPassword..
        /// </summary>
        public static string EmailTraceListenerAuthenticationModeDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerAuthenticationModeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Authentication  Mode .
        /// </summary>
        public static string EmailTraceListenerAuthenticationModeDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerAuthenticationModeDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that sends log messages to a specified email server..
        /// </summary>
        public static string EmailTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Email Trace Listener.
        /// </summary>
        public static string EmailTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string EmailTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string EmailTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
        /// </summary>
        public static string EmailTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter Name.
        /// </summary>
        public static string EmailTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &apos;From&apos; address to use for the email message created for each log entry..
        /// </summary>
        public static string EmailTraceListenerDataFromAddressDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFromAddressDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на From Address.
        /// </summary>
        public static string EmailTraceListenerDataFromAddressDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataFromAddressDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Email Trace Listener..
        /// </summary>
        public static string EmailTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Type.
        /// </summary>
        public static string EmailTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Email Trace Listener..
        /// </summary>
        public static string EmailTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string EmailTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The port to use to send the email message to the server that will despatch it. 
        ///The default if not specified is the SMTP port 25..
        /// </summary>
        public static string EmailTraceListenerDataSmtpPortDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSmtpPortDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Smtp Port.
        /// </summary>
        public static string EmailTraceListenerDataSmtpPortDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSmtpPortDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name or IP address of the server that will send the email message. 
        ///The default if not specified is the local host (127.0.0.1)..
        /// </summary>
        public static string EmailTraceListenerDataSmtpServerDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSmtpServerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Smtp Server.
        /// </summary>
        public static string EmailTraceListenerDataSmtpServerDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSmtpServerDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The suffix to add to the end of the Subject for this email message..
        /// </summary>
        public static string EmailTraceListenerDataSubjectLineEnderDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSubjectLineEnderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Subject Line Suffix.
        /// </summary>
        public static string EmailTraceListenerDataSubjectLineEnderDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSubjectLineEnderDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The prefix to add at the start of the Subject for this email message..
        /// </summary>
        public static string EmailTraceListenerDataSubjectLineStarterDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSubjectLineStarterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Subject Line Prefix.
        /// </summary>
        public static string EmailTraceListenerDataSubjectLineStarterDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataSubjectLineStarterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The &apos;To&apos; address to use for the email message created for each log entry..
        /// </summary>
        public static string EmailTraceListenerDataToAddressDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataToAddressDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To Address.
        /// </summary>
        public static string EmailTraceListenerDataToAddressDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataToAddressDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string EmailTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string EmailTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Email Trace Listener..
        /// </summary>
        public static string EmailTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string EmailTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The password to use when authenticating the specified user name..
        /// </summary>
        public static string EmailTraceListenerPasswordDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerPasswordDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Authentication Password.
        /// </summary>
        public static string EmailTraceListenerPasswordDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerPasswordDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The user name of the user for authentication when sending email messages to the mail server that will relay them.  .
        /// </summary>
        public static string EmailTraceListenerUserNameDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerUserNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Authentication  User Name.
        /// </summary>
        public static string EmailTraceListenerUserNameDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerUserNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A boolean value that specifies if the listener will authenticate and send messages using Secure Sockets Layer (SSL) encrypted communication..
        /// </summary>
        public static string EmailTraceListenerUseSSLDescription {
            get {
                return ResourceManager.GetString("EmailTraceListenerUseSSLDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use SSL.
        /// </summary>
        public static string EmailTraceListenerUseSSLDisplayName {
            get {
                return ResourceManager.GetString("EmailTraceListenerUseSSLDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that writes log messages to a specified text file. Header and footer text can be specified, and the format of the message defined though a template..
        /// </summary>
        public static string FlatFileTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Flat File Trace Listener.
        /// </summary>
        public static string FlatFileTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path and file name for the log file. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
        /// </summary>
        public static string FlatFileTraceListenerDataFileNameDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFileNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File Name.
        /// </summary>
        public static string FlatFileTraceListenerDataFileNameDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFileNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string FlatFileTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string FlatFileTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The text of the footer to add to the log message..
        /// </summary>
        public static string FlatFileTraceListenerDataFooterDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFooterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Footer.
        /// </summary>
        public static string FlatFileTraceListenerDataFooterDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFooterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
        /// </summary>
        public static string FlatFileTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter Name.
        /// </summary>
        public static string FlatFileTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The text of the header to add to the log message..
        /// </summary>
        public static string FlatFileTraceListenerDataHeaderDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataHeaderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Header.
        /// </summary>
        public static string FlatFileTraceListenerDataHeaderDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataHeaderDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string FlatFileTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string FlatFileTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Listener..
        /// </summary>
        public static string FlatFileTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string FlatFileTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string FlatFileTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string FlatFileTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Flat File Trace Listener..
        /// </summary>
        public static string FlatFileTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string FlatFileTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FlatFileTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that sends log messages to a specified Windows Event Log such as the Application or System log..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Event Log Trace Listener.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter Name.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Windows Event Log to write the log messages to, such as Application or System..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataLogDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataLogDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Log Name.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataLogDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataLogDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the machine on which the log messages should be written. The default is the local machine..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataMachineNameDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataMachineNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Machine Name.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataMachineNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataMachineNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Event Log Listener.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The source name to use when writing to the Event Log. The default is &apos;Enterprise Library Logging&apos;..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataSourceDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Source Name.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataSourceDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataSourceDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Event Log Trace Listener..
        /// </summary>
        public static string FormattedEventLogTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string FormattedEventLogTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedEventLogTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formats the contents of a log message based on the Listener type and logging target. Built-in formatters support text formatting through a template and binary formatting..
        /// </summary>
        public static string FormatterDataDescription {
            get {
                return ResourceManager.GetString("FormatterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter.
        /// </summary>
        public static string FormatterDataDisplayName {
            get {
                return ResourceManager.GetString("FormatterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Formatter..
        /// </summary>
        public static string FormatterDataNameDescription {
            get {
                return ResourceManager.GetString("FormatterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string FormatterDataNameDisplayName {
            get {
                return ResourceManager.GetString("FormatterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Formatter..
        /// </summary>
        public static string FormatterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FormatterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string FormatterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FormatterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A single Category in the list of Categories for the log message..
        /// </summary>
        public static string LogCallHandlerCategoryEntryDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerCategoryEntryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Category Entry.
        /// </summary>
        public static string LogCallHandlerCategoryEntryDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerCategoryEntryDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Category Entry..
        /// </summary>
        public static string LogCallHandlerCategoryEntryNameDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerCategoryEntryNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string LogCallHandlerCategoryEntryNameDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerCategoryEntryNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The message that the Logging Handler will add to the log entry after the target method executes..
        /// </summary>
        public static string LogCallHandlerDataAfterMessageDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataAfterMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на After Message.
        /// </summary>
        public static string LogCallHandlerDataAfterMessageDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataAfterMessageDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The message that the Logging Handler will add to the log entry before the target method executes..
        /// </summary>
        public static string LogCallHandlerDataBeforeMessageDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataBeforeMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Before Message.
        /// </summary>
        public static string LogCallHandlerDataBeforeMessageDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataBeforeMessageDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of categories to which the Logging Handler will write events. 
        ///Each category can be a literal value, and/or include the tokens {method}, {type}, {namespace}, and {assembly}..
        /// </summary>
        public static string LogCallHandlerDataCategoriesDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataCategoriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Categories.
        /// </summary>
        public static string LogCallHandlerDataCategoriesDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataCategoriesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A Call Handler that provides the capability to write log messages and trace messages as the client code invokes the selected method or accesses the selected property of the target object. This handler uses the Logging Application Block to create and write log messages..
        /// </summary>
        public static string LogCallHandlerDataDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Logging Call Handler.
        /// </summary>
        public static string LogCallHandlerDataDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The ID of the event to include in the log message..
        /// </summary>
        public static string LogCallHandlerDataEventIdDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataEventIdDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Event Id.
        /// </summary>
        public static string LogCallHandlerDataEventIdDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataEventIdDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines whether the call stack will be included in the log message. .
        /// </summary>
        public static string LogCallHandlerDataIncludeCallStackDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeCallStackDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Include Call Stack.
        /// </summary>
        public static string LogCallHandlerDataIncludeCallStackDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeCallStackDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines whether the duration of the call will be included in After Message section of the log message. .
        /// </summary>
        public static string LogCallHandlerDataIncludeCallTimeDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeCallTimeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Include Call Time.
        /// </summary>
        public static string LogCallHandlerDataIncludeCallTimeDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeCallTimeDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines whether the values of the parameters passed to the target method will be included in the log message. .
        /// </summary>
        public static string LogCallHandlerDataIncludeParameterValuesDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeParameterValuesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Include Parameter Values.
        /// </summary>
        public static string LogCallHandlerDataIncludeParameterValuesDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataIncludeParameterValuesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines if the handler will write log messages before, after, or both before and after the call to the target object. 
        ///A value from the HandlerLogBehavior enumeration. 
        ///Valid values are Before, After, and BeforeAndAfter..
        /// </summary>
        public static string LogCallHandlerDataLogBehaviorDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataLogBehaviorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Log Behavior.
        /// </summary>
        public static string LogCallHandlerDataLogBehaviorDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataLogBehaviorDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Logging Call Handler..
        /// </summary>
        public static string LogCallHandlerDataNameDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string LogCallHandlerDataNameDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The position of the handler within the policy handler chain, starting from 1. 
        ///The default value is zero, which means that there is no explicit order specified for the handler in relation to other handlers in the same handler chain..
        /// </summary>
        public static string LogCallHandlerDataOrderDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataOrderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Order.
        /// </summary>
        public static string LogCallHandlerDataOrderDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataOrderDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The priority value of the exception to include in the log message..
        /// </summary>
        public static string LogCallHandlerDataPriorityDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataPriorityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Priority.
        /// </summary>
        public static string LogCallHandlerDataPriorityDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataPriorityDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The severity value of the exception to include in the log message; using values from the TraceEventType enumeration such as Critical, Error, and Warning..
        /// </summary>
        public static string LogCallHandlerDataSeverityDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataSeverityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity.
        /// </summary>
        public static string LogCallHandlerDataSeverityDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataSeverityDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Logging Call Handler..
        /// </summary>
        public static string LogCallHandlerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("LogCallHandlerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string LogCallHandlerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("LogCallHandlerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A filter that allows all logging actions to be turned on and off through one setting..
        /// </summary>
        public static string LogEnabledFilterDataDescription {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Logging Enabled Filter.
        /// </summary>
        public static string LogEnabledFilterDataDisplayName {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies if all logging is enabled or disabled. Allows all logging actions to be turned on and off through one setting..
        /// </summary>
        public static string LogEnabledFilterDataEnabledDescription {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataEnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All Logging Enabled.
        /// </summary>
        public static string LogEnabledFilterDataEnabledDisplayName {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataEnabledDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Logging Enabled Filter..
        /// </summary>
        public static string LogEnabledFilterDataNameDescription {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string LogEnabledFilterDataNameDisplayName {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Logging Enabled Filter..
        /// </summary>
        public static string LogEnabledFilterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string LogEnabledFilterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("LogEnabledFilterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Log Files (*.log)|*.log|All Files|*.*.
        /// </summary>
        public static string LogFileDialogFilter {
            get {
                return ResourceManager.GetString("LogFileDialogFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Base class for configuration objects..
        /// </summary>
        public static string LogFilterDataDescription {
            get {
                return ResourceManager.GetString("LogFilterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Log Filter.
        /// </summary>
        public static string LogFilterDataDisplayName {
            get {
                return ResourceManager.GetString("LogFilterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Log Filter..
        /// </summary>
        public static string LogFilterDataNameDescription {
            get {
                return ResourceManager.GetString("LogFilterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string LogFilterDataNameDisplayName {
            get {
                return ResourceManager.GetString("LogFilterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Logging Filter..
        /// </summary>
        public static string LogFilterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("LogFilterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string LogFilterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("LogFilterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The default Logging Category to use for messages sent to the block that do not specify a Category. 
        ///Categories allow log messages to be handled and processed in different ways, and sent to different logging targets. 
        ///Log messages can be assigned to one or more categories..
        /// </summary>
        public static string LoggingSettingsDefaultCategoryDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsDefaultCategoryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Default Logging Category.
        /// </summary>
        public static string LoggingSettingsDefaultCategoryDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsDefaultCategoryDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Configuration settings for the Logging Application Block..
        /// </summary>
        public static string LoggingSettingsDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Logging Settings.
        /// </summary>
        public static string LoggingSettingsDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Configuration settings for the formatters that can be used with Listeners that generate text or binary output..
        /// </summary>
        public static string LoggingSettingsFormattersDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsFormattersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Log Message Formatters.
        /// </summary>
        public static string LoggingSettingsFormattersDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsFormattersDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Filters that block or allow specific or all log messages to be written to the configured logging target based on the Category, Priority, or a custom action. .
        /// </summary>
        public static string LoggingSettingsLogFiltersDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsLogFiltersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Logging Filters.
        /// </summary>
        public static string LoggingSettingsLogFiltersDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsLogFiltersDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether the block will write a Warning message to the logging target(s) specified in the Logging Errors and Warnings special category 
        ///when a log message is received that does not match any of the defined Logging Categories..
        /// </summary>
        public static string LoggingSettingsLogWarningWhenNoCategoriesMatchDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsLogWarningWhenNoCategoriesMatchDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Warn If No Category Match.
        /// </summary>
        public static string LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Configuration settings for the Logging Application Block..
        /// </summary>
        public static string LoggingSettingsNameDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string LoggingSettingsNameDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By default, log messages are written using impersonation. This provides some performance advantage for logging. 
        ///This setting allows impersonation to revert to the caller. .
        /// </summary>
        public static string LoggingSettingsRevertImpersonationDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsRevertImpersonationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Revert Impersonation.
        /// </summary>
        public static string LoggingSettingsRevertImpersonationDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsRevertImpersonationDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Configuration settings for built-in Categories that handle all events, events that do not match any other Category, and errors that occur when logging..
        /// </summary>
        public static string LoggingSettingsSpecialTraceSourcesDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsSpecialTraceSourcesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Special Categories.
        /// </summary>
        public static string LoggingSettingsSpecialTraceSourcesDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsSpecialTraceSourcesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Trace Listeners available to direct log messages to specific logging targets such as Windows Event Log or a database..
        /// </summary>
        public static string LoggingSettingsTraceListenersDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsTraceListenersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Logging Target Listeners.
        /// </summary>
        public static string LoggingSettingsTraceListenersDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsTraceListenersDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A list of categories to which log messages can be assigned. Log messages can be assigned to one or more Categories. 
        ///Each Category defines how log messages assigned that category will be handled..
        /// </summary>
        public static string LoggingSettingsTraceSourcesDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsTraceSourcesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Categories.
        /// </summary>
        public static string LoggingSettingsTraceSourcesDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsTraceSourcesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether activity tracing is enabled. When enabled, code can use Tracer instances to trace individual activities and associate the resulting log messages through an Activity ID..
        /// </summary>
        public static string LoggingSettingsTracingEnabledDescription {
            get {
                return ResourceManager.GetString("LoggingSettingsTracingEnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activity Tracing Enabled.
        /// </summary>
        public static string LoggingSettingsTracingEnabledDisplayName {
            get {
                return ResourceManager.GetString("LoggingSettingsTracingEnabledDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Queue Path.
        /// </summary>
        public static string MsmqTraceListenerDataCategoryQueuePathDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataCategoryQueuePathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Queue Path.
        /// </summary>
        public static string MsmqTraceListenerDataCategoryQueuePathDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataCategoryQueuePathDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that writes log messages to a specified Windows Message Queuing queue. 
        ///A wide range of options can be specified for the queues, priority, transaction, and encryption..
        /// </summary>
        public static string MsmqTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Queuing Trace Listener.
        /// </summary>
        public static string MsmqTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string MsmqTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string MsmqTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The formatter to use with this trace listener. 
        ///This must be the Binary Formatter when you use this listener with the Message Queuing distributor service..
        /// </summary>
        public static string MsmqTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter Name.
        /// </summary>
        public static string MsmqTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string MsmqTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string MsmqTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sets the priority of a log entry. 
        ///This determines its priority while the log entry is in transit and when it is inserted into its destination queue. 
        ///Possible values are: AboveNormal, High, Highest, Low, Lowest, Normal, VeryHigh, and VeryLow..
        /// </summary>
        public static string MsmqTraceListenerDataMessagePriorityDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataMessagePriorityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Priority.
        /// </summary>
        public static string MsmqTraceListenerDataMessagePriorityDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataMessagePriorityDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Message Queuing (MSMQ) Trace Listener..
        /// </summary>
        public static string MsmqTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string MsmqTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path to the queue that the Msmq TraceListener instance uses. This attribute is a message queuing path, and it applies to the MsmqTraceListener class..
        /// </summary>
        public static string MsmqTraceListenerDataQueuePathDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataQueuePathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Queue Path.
        /// </summary>
        public static string MsmqTraceListenerDataQueuePathDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataQueuePathDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether the log entry is guaranteed to be delivered if there is a computer failure or network problem..
        /// </summary>
        public static string MsmqTraceListenerDataRecoverableDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataRecoverableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recoverable.
        /// </summary>
        public static string MsmqTraceListenerDataRecoverableDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataRecoverableDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The total time for a log entry to be received by the destination queue..
        /// </summary>
        public static string MsmqTraceListenerDataTimeToBeReceivedDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTimeToBeReceivedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time To Be Received.
        /// </summary>
        public static string MsmqTraceListenerDataTimeToBeReceivedDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTimeToBeReceivedDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The maximum time for the log entry to reach the queue..
        /// </summary>
        public static string MsmqTraceListenerDataTimeToReachQueueDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTimeToReachQueueDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time To Reach Queue.
        /// </summary>
        public static string MsmqTraceListenerDataTimeToReachQueueDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTimeToReachQueueDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string MsmqTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string MsmqTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The type of a Message Queuing transaction. Possible values are Automatic, None, and Single..
        /// </summary>
        public static string MsmqTraceListenerDataTransactionTypeDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTransactionTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Transaction Type.
        /// </summary>
        public static string MsmqTraceListenerDataTransactionTypeDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTransactionTypeDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Message Queuing (MSMQ) Trace Listener..
        /// </summary>
        public static string MsmqTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string MsmqTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether the message was (or must be) authenticated before being sent..
        /// </summary>
        public static string MsmqTraceListenerDataUseAuthenticationDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseAuthenticationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use Authentication.
        /// </summary>
        public static string MsmqTraceListenerDataUseAuthenticationDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseAuthenticationDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether a copy of a message that could not be delivered should be sent to a dead-letter queue..
        /// </summary>
        public static string MsmqTraceListenerDataUseDeadLetterQueueDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseDeadLetterQueueDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use Dead Letter Queue.
        /// </summary>
        public static string MsmqTraceListenerDataUseDeadLetterQueueDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseDeadLetterQueueDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies whether to make the message private..
        /// </summary>
        public static string MsmqTraceListenerDataUseEncryptionDescription {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseEncryptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use Encryption.
        /// </summary>
        public static string MsmqTraceListenerDataUseEncryptionDisplayName {
            get {
                return ResourceManager.GetString("MsmqTraceListenerDataUseEncryptionDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A filter that blocks log messages or allows them to pass based on the priority specified in the log message. .
        /// </summary>
        public static string PriorityFilterDataDescription {
            get {
                return ResourceManager.GetString("PriorityFilterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Priority Filter.
        /// </summary>
        public static string PriorityFilterDataDisplayName {
            get {
                return ResourceManager.GetString("PriorityFilterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The maximum priority value for messages to be passed to the logging target listener(s).  
        ///Messages with a priority above this value are not sent to the logging target. .
        /// </summary>
        public static string PriorityFilterDataMaximumPriorityDescription {
            get {
                return ResourceManager.GetString("PriorityFilterDataMaximumPriorityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maximum Priority.
        /// </summary>
        public static string PriorityFilterDataMaximumPriorityDisplayName {
            get {
                return ResourceManager.GetString("PriorityFilterDataMaximumPriorityDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum priority value for messages to be passed to the logging target listener(s).  
        ///Messages with a priority below this value are not sent to the logging target..
        /// </summary>
        public static string PriorityFilterDataMinimumPriorityDescription {
            get {
                return ResourceManager.GetString("PriorityFilterDataMinimumPriorityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minimum Priority.
        /// </summary>
        public static string PriorityFilterDataMinimumPriorityDisplayName {
            get {
                return ResourceManager.GetString("PriorityFilterDataMinimumPriorityDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Priority Filter..
        /// </summary>
        public static string PriorityFilterDataNameDescription {
            get {
                return ResourceManager.GetString("PriorityFilterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string PriorityFilterDataNameDisplayName {
            get {
                return ResourceManager.GetString("PriorityFilterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Priority Logging Filter..
        /// </summary>
        public static string PriorityFilterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("PriorityFilterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string PriorityFilterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("PriorityFilterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that writes log messages to a series of text files. 
        ///The listener can start a new file at specified intervals, use a specified file naming pattern, and optionally overwrite existing files. 
        ///Header and footer text can be specified, and the format of the message defined though a template..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rolling Flat File Trace Listener.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path and name of the disk file to write log message to. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFileNameDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFileNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File Name.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFileNameDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFileNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The text of the footer to add to the log message..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFooterDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFooterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Footer.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFooterDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFooterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Formatter Name.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The text of the header to add to the log message..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataHeaderDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataHeaderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message Header.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataHeaderDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataHeaderDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The maximum number of log files to retain. When set to a numeric value, the listener will purge old files based on the file creation date when the number exceeds the specified value..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataMaxArchivedFilesDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataMaxArchivedFilesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max Archived Files.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Rolling Flat File Trace Listener..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines what occurs to an existing file when it rolls over. 
        ///Increment means that the listener will create a new file using a name created by incrementing the timestamp. 
        ///Overwrite means that, if a value for the Timestamp Pattern is not specified, the existing file is overwritten..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File Exists Behavior.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Determines when the log file rolls over. The default is None. 
        ///Other options are intervals of Midnight, Minute, Hour, Day, Month, or Year. 
        ///If required, both a maximum file size and a roll interval can be specified..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollIntervalDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollIntervalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Roll Interval.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollIntervalDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollIntervalDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The maximum size of the log file, in kilobytes, before it rolls over. If required, both a maximum file size and a roll interval can be specified..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollSizeKBDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollSizeKBDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Roll Size KB.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataRollSizeKBDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataRollSizeKBDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The date/time format used to create the suffix for the file name, such as &apos;yyyy-MM-dd&apos;..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTimeStampPatternDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTimeStampPatternDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Timestamp Pattern.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTimeStampPatternDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTimeStampPatternDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Rolling Flat File Trace Listener..
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string RollingFlatFileTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("RollingFlatFileTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A filter that can be used to specify a logging target for all log messages sent to the Logging Application Block..
        /// </summary>
        public static string SpecialTraceSourcesDataAllEventsTraceSourceDescription {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataAllEventsTraceSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All Events Category Filter.
        /// </summary>
        public static string SpecialTraceSourcesDataAllEventsTraceSourceDisplayName {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataAllEventsTraceSourceDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Filters that allow all events, unprocessed events, and logging and working messages to be sent to specified logging target listeners..
        /// </summary>
        public static string SpecialTraceSourcesDataDescription {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Special Category Filters.
        /// </summary>
        public static string SpecialTraceSourcesDataDisplayName {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A filter that can be used to specify a logging target for log messages when a logging error occurs..
        /// </summary>
        public static string SpecialTraceSourcesDataErrorsTraceSourceDescription {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataErrorsTraceSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Errors Category Filter.
        /// </summary>
        public static string SpecialTraceSourcesDataErrorsTraceSourceDisplayName {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataErrorsTraceSourceDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A filter that can be used to specify a logging target for log messages that do not match any configured category..
        /// </summary>
        public static string SpecialTraceSourcesDataNotProcessedTraceSourceDescription {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataNotProcessedTraceSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unprocessed Category Filter.
        /// </summary>
        public static string SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName {
            get {
                return ResourceManager.GetString("SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An abstract base class for trace listeners that monitor trace and debug output..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на System Diagnostics Trace Listener.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the System Diagnostics Trace Listener..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the System Diagnostics Trace Listener..
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string SystemDiagnosticsTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("SystemDiagnosticsTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A Log Message Formatter that generates the output for a log message in a text format suitable for use with listeners such as the 
        ///Flat File, Rolling Flat File, Email, and Event Log Trace Listeners. .
        /// </summary>
        public static string TextFormatterDataDescription {
            get {
                return ResourceManager.GetString("TextFormatterDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Text Formatter.
        /// </summary>
        public static string TextFormatterDataDisplayName {
            get {
                return ResourceManager.GetString("TextFormatterDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Text Log Message Formatter..
        /// </summary>
        public static string TextFormatterDataNameDescription {
            get {
                return ResourceManager.GetString("TextFormatterDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string TextFormatterDataNameDisplayName {
            get {
                return ResourceManager.GetString("TextFormatterDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The template used to format the log message. It contains tokens that are replaced by values from the log message. 
        ///Use the editor to edit the default template and insert tokens and text..
        /// </summary>
        public static string TextFormatterDataTemplateDescription {
            get {
                return ResourceManager.GetString("TextFormatterDataTemplateDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template.
        /// </summary>
        public static string TextFormatterDataTemplateDisplayName {
            get {
                return ResourceManager.GetString("TextFormatterDataTemplateDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Text Log Message Formatter..
        /// </summary>
        public static string TextFormatterDataTypeNameDescription {
            get {
                return ResourceManager.GetString("TextFormatterDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string TextFormatterDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("TextFormatterDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A collection of Trace Listeners..
        /// </summary>
        public static string TraceListenerDataCollectionDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataCollectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Listener Data Collection.
        /// </summary>
        public static string TraceListenerDataCollectionDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataCollectionDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An abstract base class for all trace listeners..
        /// </summary>
        public static string TraceListenerDataDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Listener.
        /// </summary>
        public static string TraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string TraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string TraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string TraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string TraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Trace Listener..
        /// </summary>
        public static string TraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string TraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string TraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string TraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Trace Listener..
        /// </summary>
        public static string TraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("TraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string TraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Logging Target Listener to which log entries will be sent..
        /// </summary>
        public static string TraceListenerReferenceDataDescription {
            get {
                return ResourceManager.GetString("TraceListenerReferenceDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Listener.
        /// </summary>
        public static string TraceListenerReferenceDataDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerReferenceDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the Logging Target Listener to which log entries will be sent..
        /// </summary>
        public static string TraceListenerReferenceDataNameDescription {
            get {
                return ResourceManager.GetString("TraceListenerReferenceDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Listener Name.
        /// </summary>
        public static string TraceListenerReferenceDataNameDisplayName {
            get {
                return ResourceManager.GetString("TraceListenerReferenceDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Specifies if the Logging Target Listeners will automatically flush messages to the target as soon as they are received. 
        ///When set to False, the Listener buffers the messages and sends them to the target in batches or when significant events occur such as the machine shutting down..
        /// </summary>
        public static string TraceSourceDataAutoFlushDescription {
            get {
                return ResourceManager.GetString("TraceSourceDataAutoFlushDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto Flush.
        /// </summary>
        public static string TraceSourceDataAutoFlushDisplayName {
            get {
                return ResourceManager.GetString("TraceSourceDataAutoFlushDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The severity level for messages that will be logged. Messages sent to the block for this category, 
        ///and with a lower severity than that specified, will not be logged for this category..
        /// </summary>
        public static string TraceSourceDataDefaultLevelDescription {
            get {
                return ResourceManager.GetString("TraceSourceDataDefaultLevelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minimum Severity.
        /// </summary>
        public static string TraceSourceDataDefaultLevelDisplayName {
            get {
                return ResourceManager.GetString("TraceSourceDataDefaultLevelDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defines the settings for a Category to which log messages can be assigned. 
        ///Log messages can be assigned to one or more Categories. 
        ///Each Category defines how log messages assigned that category will be handled..
        /// </summary>
        public static string TraceSourceDataDescription {
            get {
                return ResourceManager.GetString("TraceSourceDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Category.
        /// </summary>
        public static string TraceSourceDataDisplayName {
            get {
                return ResourceManager.GetString("TraceSourceDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the logging category..
        /// </summary>
        public static string TraceSourceDataNameDescription {
            get {
                return ResourceManager.GetString("TraceSourceDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string TraceSourceDataNameDisplayName {
            get {
                return ResourceManager.GetString("TraceSourceDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of Logging Target Listeners for this Category or Special Filter..
        /// </summary>
        public static string TraceSourceDataTraceListenersDescription {
            get {
                return ResourceManager.GetString("TraceSourceDataTraceListenersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners.
        /// </summary>
        public static string TraceSourceDataTraceListenersDisplayName {
            get {
                return ResourceManager.GetString("TraceSourceDataTraceListenersDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that raises a WMI event for each log message..
        /// </summary>
        public static string WmiTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WMI Trace Listener.
        /// </summary>
        public static string WmiTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string WmiTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string WmiTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string WmiTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string WmiTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the WMI Trace Listener..
        /// </summary>
        public static string WmiTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string WmiTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string WmiTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string WmiTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the WMI Trace Listener..
        /// </summary>
        public static string WmiTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string WmiTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("WmiTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A logging target listener that writes log messages in XML format to a specified text file..
        /// </summary>
        public static string XmlTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на XML Trace Listener.
        /// </summary>
        public static string XmlTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path and name of the disk file to write the log messages to. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
        /// </summary>
        public static string XmlTraceListenerDataFileNameDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataFileNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File Name.
        /// </summary>
        public static string XmlTraceListenerDataFileNameDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataFileNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        public static string XmlTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severity Filter.
        /// </summary>
        public static string XmlTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the Listener..
        /// </summary>
        public static string XmlTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listener Data Type.
        /// </summary>
        public static string XmlTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name of the XML Trace Listener..
        /// </summary>
        public static string XmlTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string XmlTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        public static string XmlTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace Output Options.
        /// </summary>
        public static string XmlTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The fully qualified type name of the XML Trace Listener..
        /// </summary>
        public static string XmlTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string XmlTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("XmlTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
    }
}
